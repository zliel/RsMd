searchState.loadedDescShard("markrs", 0, "This module handles the configuration I/O for the …\nReturns the argument unchanged.\nThis module provides functionality to generate HTML from …\nCalls <code>U::from(self)</code>.\nThis module provides functionality related to …\nThis module provides functionality to tokenize a line of …\nThis module contains the parser for converting tokenized …\nThis module defines the types used in the markdown parser, …\nRepresents the global configuration for the application.\nManages all configuration for HTML generation\nManages all configuration for tokenization\nSets the default CSS file to “default” in the case …\nSets the default PrismJS theme to “vsc-dark-plus” in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Config</code> instance from the specified file path\nInitializes the global configuration from the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets <code>sanitize_html</code> to true by default in <code>config.toml</code>\nValidates the configuration by checking if the original …\nFormats the file name to create a title for the HTML …\nGenerates a default CSS stylesheet as a string.\nGenerates the HTML head section\nGenerates an HTML string from a vector of MdBlockElements\nGenerates the index HTML file that lists all pages\nGenerates the HTML for the navigation bar\nIndents each line of the given HTML string by the …\nCopies a CSS file to the specified output directory.\nCopies a favicon file to the specified output directory.\nCopies a file from the input path to the specified output …\nCopies an image file to the specified output directory.\nChecks if the configuration file exists at the specified …\nReturns the OS-specific configuration path.\nReads the contents of a file into a String.\nReads all markdown files from the specified input …\nHelper function to recursively visit subdirectories and …\nWrites the default configuration to the configuration file …\nWrites a default CSS file to the specified output …\nWrites the provided HTML string to a file in the specified …\nHelper function to determine if a string is a single …\nTokenizes a line of markdown text into a vector of <code>Token</code> …\nAttaches the current line to the previous block, …\nFlattens a vector of inline Markdown elements into a …\nGroups dashed lines into blocks based on the previous block…\nGroups adjacent tokenized lines into groups (blocks) for …\nGroups lines with leading whitespace into blocks based on …\nGroups ordered list lines into a block by appending the …\nGroups Setext heading 1 lines into a block by prepending …\nGroups tabbed lines into blocks based on the previous block…\nGroups lines beginning with “|” denoting Markdown …\nGroups text lines into blocks based on the previous block…\nHelper function used in <code>parse_link_type</code> to circumvent Rust…\nHelper function used in <code>parse_link_type</code> to circumvent Rust…\nParses a single line of tokens into a block-level Markdown …\nParses a blockquote from a vector of tokens into an …\nParses a vector of tokenized markdown lines into a vector …\nParses a code span starting from the current position of …\nParses a vector of tokens representing a code block into …\nParses a vector of tokens representing a heading into an …\nParses an indented code block from a vector of tokens.\nParses a vector of tokens into a vector of inline Markdown …\nParses a link type (either a link or an image) from the …\nGeneric list parser used to reduce code duplication …\nParses a vector of tokens representing an ordered list …\nParses raw HTML tags from a vector of tokens into an …\nParses GitHub-style tables from the input vector of tokens.\nParses a vector of tokens representing an unordered list …\nParses (resolves) emphasis in a vector of inline Markdown …\nHelper function to split a row of tokens into individual …\nManages Delimiter runs in a markdown document. A delimiter …\nRepresents block-level markdown elements.\nRepresents inline markdown elements (text, bold/italic, …\nRepresents a list item in markdown, which can contain …\nRepresents a cell in a markdown table.\nRepresents the alignment of table cells in markdown tables.\nRepresents the different types of tokens that can be found …\nCursor for navigating through a vector of tokens\nReturns the nth previous token, if any.\nSets the cursor’s position to the specified position.\nMoves the cursor forward one position.\nDetermines whether a delimiter is “Left”, “Right”, …\nReturns the current token, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the cursor is at the end of the token list.\nHelper function to determine if a token is punctuation.\nHelper function to determine if a token is whitespace or …\nReturns the nth next token, if any.\nReturns the current position of the cursor.\nConverts the implementing type to an String representing …\nBuilds a relative prefix path based on the provided HTML …\nUtility function for pushing a String buffer to a generic …")